express 없이 서버연결하기는 day01/main 파일 참고

/* 서버는 항상 켜져있어야 하므로 그걸 3000포트넘버로 대기하겠다
뒤에 아이피넘버 적으면 아이피로 접속하게됨

http://localhost:3000/로 접속하면 열려있음
아이피로는 http://192.168.15.1:3000/

터미널을 열어서 아래와 같이 적어준다.
실제 적은 부분은 ""큰따옴표로 묶음
PS D:\01_김보선_핀테크\web_front\HTML> "cd .\Node\day01"
PS D:\01_김보선_핀테크\web_front\HTML\Node\day01> "node main"

끌땐 ctrl+c

기능을 추가할 때
npm install supervisor --save
기능 기능 설치할프로그램 해당파일 안에서만 사용하겠다는 의미의 기능
uninstall 하면 삭제된다

설치한 프로젝트가 무슨버전으로 설치되었는지 기억해야
나중에 유지보수할때 버전 맞춰서 수정을 해야만한다

이후 다른 버전이 나오면 기능이 없어지거나, 사용방법이 달라지는등
기존에 있던 페이지를 못쓰게 될수도 있으니까

설치할때 프로그램명 뒤에 @버전명 하면 코드명을 명시하고,
이후 latest는 최신버전으로...?

supervisor = 연결된 웹페이지에 바뀐 코드 내용을 새로고침으로 볼 수 있게 함
express = 페이지간 연결을 쉽게 할 수 있게 해줌

수퍼바이져 실행 안될땐 npx supervisor 파일이름 
npx > 현재 위치에서..실행?
-g 글로벌(전역)으로 저장실행하는 기능

*/

const express = require('express');
const app = express();
/*express로 .get 이용해 경로를 지정해줄수 있다.
안쓸경우 main 파일처럼 if문으로 가는 경로마다 다 지정해줘야함 */


app.set("views", "./") //이 기능을 볼거고
app.set("view engine", "ejs")//그걸 ejs를 통해 볼꺼다


res.render("") > 괄호안 파일로 이동한다. 파일이 있어야만 작동
res.send("") >  괄호안 텍스트를 내보낸다. 파일이 없어도 작동

app.get("/", (req, res)=>{
    //res.send("기본 페이지");
    res.render("index") 
    //첫번째 / 는 기본페이지로서 작동하게 한다.
    실제로는 main 파일에서 index 파일로 연결해 여는것
})
app.get("/test", (req, res)=>{
    res.send("테스트 페이지");
    //기본페이지인 index와 같은 폴더안에 있는 파일일 경우
    /파일명 으로 연결시켜줄 수 있다.
})
app.listen(3000, ()=>{console.log("3000 port server 구동")});


app.get("/member", (req, res)=>{
    context = {
        arr : ['홍길동', '20살', '산골짜기'],
        obj : {'name':'김개똥', 'age':'30살', 'addr':'개똥별'},
        name : '고길동', 'age' : '40살', 'addr' : '마포구'
    }
    res.render("member",{context:context})
    //키와 밸류를 같은이름으로 넘길경우
    생략으로 그냥 {context} 하나만 적어도 된다
    }
)

  <a href="/for">for 이동</a>
위와 같이 코딩하면 for 이동 이라는 글자에 링크효과가 되고,
/for 파일로 페이지가 이동


<!--HTML. JavaScript 는 프론트, 사용자가 보는 화면
    Java, Nodejs는 백, 개발자가 볼 수 있는 화면-->

  <!--스크립트를 쓰면 스크립트 밖의 변수를 사용할 수 없다.
    스크립트에서 전역변수를 부를 수는 있다. 반대는 불가능
백 언어를 프론트로 내보낼때 그대로 쓰면 안되고 프론트언어로 번역을 해주어야함
그걸 서버가 해준다?-->

ejs는 모든 파일을 <% %> 태그에 넣어줘야하고,
출력하는 폼은 <%= %> 이다. 그래서 <% %> 태그 안에 출력폼을 넣어줄경우
닫아주는 코드가 같아서 오류가 생기니 
출력폼 하기 전에 닫아주고, 출력폼 넣고 다시 열어주면 됌

그리고 HTML 언어를 써야할 경우에도 닫고 HTML쓰고 다시 열어주면 됌

<hr>
    이름 : <%= n %> <!--n :해당하는 값을 출력하겠다-->
<hr>

이렇게 사이에 끼워넣어도 가능

<%= Object.keys(context) %> //context의 키값만 가져옴
<%= Object.keys(context.obj) %> //context의 obj의 키 값만 가져옴
<%= Object.values(context) %> //context의 밸류값만 가져옴

