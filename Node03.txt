새프로젝트에 설치할 라이브러리
필수항목은 이름 시작에 *이 붙어있음

*express ( 노드에서 쓰는 기능들 제공 )

*ejs ( 동적 웹페이지,화면에 보이는거 )

*supervisor ( 사용자가 UNIX 유사 운영 체제에서 
    여러 프로세스를 모니터링하고 제어할 수 있도록 하는 
    클라이언트/서버 시스템 )

cookie-parser ( 서버에서 해석하기 어려운 쿠키를 단순화 시킴 )

express-session ( 세션을 생성할 수 있게 해주는 미들웨어 모듈  )

body-parser ( 클라이언트(일반적으로 웹 브라우저)에서 
    서버로 전송된 데이터를 처리하는 데 중요한 역할을 합니다. 
    특히 이는 들어오는 요청이 경로 핸들러(특정 URL을 처리하는 코드)에 
    도달하기 전에 가로채는 기능인 미들웨어(연결해주는) 역할을 합니다.)

session-file-store ( 세션 관련 데이터를 포함하는 일부 테이블. 
    세션 스토어는 사용자에 대한 정보를 
    고유 식별자를 가진 세션으로 저장하는 방법.
    메모리나 데이터베이스에 저장할 수 있습니다.)

oracledb@^5.5.0 >>데이터베이스 연결해서 사용하려면 필요한듯
    (골뱅이 뒤는 버전명, 이 특정 버전명이 필요하다고 했음)

multer@1.4.4 >>파일을 업로드하는 힘든 프로세스를 훨씬 쉽게 만들어주는 
    multipart/form-data를 처리하기 위한 Node.js 미들웨어

Framework >> 소프트웨어를 구축할 수 있는 구조
    일반적으로 특정 프로그래밍 언어와 연결되며 다양한 유형의 작업에 적합

middle ware >> 두 개 이상의 애플리케이션 , 
    특히 처음에는 그렇게 하도록 설계되지 않은 애플리케이션이 
    서로 통신할 수 있도록 하는 소프트웨어 유형

http 클라이언트와 서버가
서로 값만 전달하고 연결을 끊는다.
그래서 로그인시 키를 하나 만들어 서버가 클라이언트로 보냄

쿠키는 사용자가 쓰는 것
세션은 서버에서 사용하는것.

쿠키는 외부에서 접근이 가능해 보안 취약

https://devuna.tistory.com/23


const cookieConfig = {
    httpOnly : true, //웹통신에서 적용하겠다는 의미
    macAge : 5000, // 5초
    //signed : true, //쿠키를 암호화 한다(기준이 될 키값이 필요하다)
}



//app.use(cookieParser("아무값이나키로설정"));
//라우터보다 위에 적어야 기능함
app.use(cookieParser());
메인에서 위같이 적고

//let cart_list = req.signedCookies.cart_list;
사용하는 페이지(컨트롤러) 에서 받아서 사용


// close(); //window. 생략 가능
s

window.open("/cookie/popup", "", opt)
//공백을 줘야 새창에 열림,안주면 현페이지에서 바뀜



router.get("/save/:goods", ctrl.save)
// save/ 로 들어오는 goods라는 변수를 받으면 ctrl.save로 이동한다는 의미
//변수를 받아주려면 콜론이 필요하다


const goods_id = req.params.goods;
    //링크타고 넘어가는 경로는 params 이용
    
